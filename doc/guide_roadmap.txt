/***********************************
TODO
***********************************/
user
  avatar
  CipherService.createToken


/***********************************
Elements
***********************************/

routing
  custom routes
    match explict route
    then trigger controller/action
  shadow routes
    blueprint routes: auto generated as long as model and controller with same name exist
    shortcut routes: rest-like routes access from browsers
    cross-site request forgery (CSRF) token route
  asset routes
    map directly to file system

policy
  executed before controller action is executed
  access control system
    user identity management (create account)
    front-end personalization (choose what the user sees)
    authentication ()
    backend-end api access

controller: aggregates actions under a common resource

model: representing a table
  attributes: table columns
  methods: building function for manipulating records (find, create, update, destroy)
  settings: configurable properties (connection, tableName, migrate, schema)
  adapter:



localjs: override existing configuration



/***********************************
operation flow
***********************************/
incoming request
matches explicit route
router
  triggers a controller/action
  triggers a server rendered view
gathers incoming params
using the params to manipulate data
returns a response code depends on the status


/***********************************
dev flow
***********************************/
philosophy: front-end driven
  interactive mockup
    indentify endpoints
  fake it till you make it
    use blueprints for prototyping
  finalize
    finalize with explict routes and controller actions



//retrieve param from req
req.param('username')





/***********************************
security issues
***********************************/
cross-site forgery token route
xss
sql injection





/***********************************
Ecosystem
***********************************/
hardware: ECS (compute) + RDS(data store) + qiniuyun (image store) + CDN(delivery)
nginx: load balancer / reverse proxy server
nodejs: javascript server runtime environemnt
Express: http request / response (application server)
sailsjs: backend MVC framework
database: PosgreSQL + MongoDB (optional)
orm: waterfront
Blueprint: auto generated REST API for prototyping
PassportJs: Authentication + Authorization (Basic Auth + JWT)
Access Control: role-based access control
security concerns: CSRF, XSS, SQL Injection, DDOS
socketio: websocket (real-time communication)
swagger: API documentation generation
python: web crawler + automation
Bash: general scripting
Docker: virtualization container
